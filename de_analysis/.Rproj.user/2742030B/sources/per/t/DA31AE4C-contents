## Gene-level differential expression analysis using DESeq2 

rm(list=ls(all=TRUE))

## Setups 
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
#install.packages(<path to downloaded file with DEGreport tar.gz>, repos = NULL)
library(DEGreport)

## reaading file:
df <- read.csv("data/counts.Sirius.csv",sep = ";") 

## Trying to reorder columns by replicates alphabetically:
#data <- data %>%  mutate(gene = ifelse(is.na(Symbol), name, Symbol)) ## create column with gene names/ID

coln1 <- c(colnames(df[5:16]))
coln1 <- sort(coln1)
coln2 <- c(colnames(df[1:4]))
coln = c(coln2, coln1)
coln
data <- df[, coln]

## some preparations of data dataframe:
#drop <- c("gene", "Refseq","Gene.name", "Symbol")
#data = data[,!(names(data) %in% drop)]
#data <- data[complete.cases(data['name']),]
row.names(data) <- data[,1]
drop <- c('CC1', coln2) #remove CC1 from analysis, cause it doesn't cluster well
data = data[,!(names(data) %in% drop)]



meta <- data.frame(colnames(data))
meta['sampletype'] <- c('wt', 'wt', 'wt', 'opt', 'opt', 'opt', 
                        'control', 'control', 'GFP', 'GFP', 'GFP')
row.names(meta) <- meta[,1]
meta <- subset(meta, select = c('sampletype'))

all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))

## creating DESeq DataSet
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run DESeq2 differential expression analysis
dds <- DESeq(dds)

##  **Optional step** - Output normalized counts to save as a file to access outside RStudio
normalized_counts <- counts(dds, normalized=TRUE) 
write.table(normalized_counts, file="data/normalized_counts.txt", sep="\t", quote=F, col.names=NA) 

## QC
# Transform counts for data visualization
rld <- rlog(dds, blind=TRUE)
# Plot PCA 
plotPCA(rld, intgroup="sampletype")
# Extract the rlog matrix from the object
rld_mat <- assay(rld)
# Compute pairwise correlation values
rld_cor <- cor(rld_mat)
# Plot heatmap
heat.colors <- brewer.pal(6, "Blues")
pheatmap(rld_cor, color = heat.colors, fontsize = 10, fontsize_row = 10, height=20)

## Shrinkage 
contrast_wt <- c("sampletype", "wt", "control")
contrast_opt <- c("sampletype", "opt", "control")
res_unshrunken_wt <- results(dds, contrast = contrast_wt)
res_unshrunken_opt <- results(dds, contrast = contrast_opt)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_shrunken_opt <- lfcShrink(dds, contrast = contrast_opt, res=res_unshrunken_opt, type='normal')

## How many genes are differentially expressed compared to control:
padj.cutoff <- 0.05
lfc.cutoff <- 0.58
# Turn the results object into a data frame
res_df_wt <- data.frame(res_shrunken_wt)
res_df_opt <- data.frame(res_shrunken_opt)
# Subset the significant results
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
sig_res_opt <- filter(res_df_opt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)

#### Plot expression of a single gene 
# ENSG00000129221 - AIPL1 gene 
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000129221", intgroup="sampletype", returnData=TRUE)
# Plotting AIPL1 normalized counts, using the samplenames (rownames of d as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) + 
  geom_point(position=position_jitter(w = 0.1,h = 0)) +
  geom_text_repel(aes(label = rownames(d))) + 
  theme_bw() +
  ggtitle("AIPL1 gene expression") +
  theme(plot.title = element_text(hjust = 0.5))

## extract df with differentially expressed upregulated genes:
res_df_wt_up_TF <- res_df_wt %>% 
  mutate(dif_expr = padj < 0.05 & log2FoldChange >= 0.58)
res_df_opt_up_TF <- res_df_opt %>% 
  mutate(dif_expr = padj < 0.05 & log2FoldChange >= 0.58)

de_up_wt <- res_df_wt_up_TF[which(res_df_wt_up_TF$dif_expr == 'TRUE'), ]
de_up_opt <- res_df_opt_up_TF[which(res_df_opt_up_TF$dif_expr == 'TRUE'), ]

df_genes <- df[, 1:4]
row.names(df_genes) <- df_genes[,1]
drop <- c('name') 
df_genes = df_genes[,!(names(df_genes) %in% drop)]
## Merge:
de_up_wt <- merge(x = de_up_wt, y = df_genes, by = 0, all.x = TRUE)
de_up_opt <- merge(x = de_up_opt, y = df_genes, by = 0, all.x = TRUE)
write.table(de_up_wt['Symbol'], file="results/de_up_wt_vs_control.txt", sep="\t", quote=F, col.names=NA) 
write.table(de_up_opt['Symbol'], file="results/de_up_opt_vs_control.txt", sep="\t", quote=F, col.names=NA) 

## extract df with differentially expressed downregulated genes:
res_df_wt_down_TF <- res_df_wt %>% 
  mutate(dif_expr = padj < 0.05 & log2FoldChange <= -0.58)
res_df_opt_down_TF <- res_df_opt %>% 
  mutate(dif_expr = padj < 0.05 & log2FoldChange <= -0.58)

de_down_wt <- res_df_wt_down_TF[which(res_df_wt_down_TF$dif_expr == 'TRUE'), ]
de_down_opt <- res_df_opt_down_TF[which(res_df_opt_down_TF$dif_expr == 'TRUE'), ]

df_genes <- df[, 1:4]
row.names(df_genes) <- df_genes[,1]
drop <- c('name') 
df_genes = df_genes[,!(names(df_genes) %in% drop)]
## Merge:
de_down_wt <- merge(x = de_down_wt, y = df_genes, by = 0, all.x = TRUE)
de_down_opt <- merge(x = de_down_opt, y = df_genes, by = 0, all.x = TRUE)
write.table(de_down_wt['Symbol'], file="results/de_down_wt_vs_control.txt", sep="\t", quote=F, col.names=NA) 
write.table(de_down_opt['Symbol'], file="results/de_down_opt_vs_control.txt", sep="\t", quote=F, col.names=NA) 





#### Volcano plot
## Obtain logical vector where TRUE values denote padj values < 0.05 and fold change > 1.5 in either direction
res_df_wt_TF <- res_df_wt %>% 
  mutate(dif_expr = padj < 0.05 & abs(log2FoldChange) >= 0.58)
res_df_opt_TF <- res_df_opt %>% 
  mutate(dif_expr = padj < 0.05 & abs(log2FoldChange) >= 0.58)
## Plot
ggplot(res_df_wt_TF) +
  geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = dif_expr)) +
  ggtitle("Differential expression wtAIPL1 vs CC") +
  xlab("log2 fold change") + 
  ylab("-log10 adjusted p-value") +
  #scale_y_continuous(limits = c(0,50)) +
  theme(legend.position = "none",
        plot.title = element_text(size = rel(1.5), hjust = 0.5),
        axis.title = element_text(size = rel(1.25)))  
ggplot(res_df_opt_TF) +
  geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = dif_expr)) +
  ggtitle("Differential expression optAIPL1 vs CC") +
  xlab("log2 fold change") + 
  ylab("-log10 adjusted p-value") +
  #scale_y_continuous(limits = c(0,50)) +
  theme(legend.position = "none",
        plot.title = element_text(size = rel(1.5), hjust = 0.5),
        axis.title = element_text(size = rel(1.25)))  



## extract df with differentially expressed upregulated genes:
res_df_wt_up_TF <- res_df_wt %>% 
  mutate(dif_expr = padj < 0.05 & log2FoldChange >= 0.58)
res_df_opt_up_TF <- res_df_opt %>% 
  mutate(dif_expr = padj < 0.05 & log2FoldChange >= 0.58)

de_up_wt <- res_df_wt_up_TF[which(res_df_wt_up_TF$dif_expr == 'TRUE'), ]
de_up_opt <- res_df_opt_up_TF[which(res_df_opt_up_TF$dif_expr == 'TRUE'), ]

df_genes <- df[, 1:4]
row.names(df_genes) <- df_genes[,1]
drop <- c('name') 
df_genes = df_genes[,!(names(df_genes) %in% drop)]

## Merge:
de_up_wt <- merge(x = de_up_wt, y = df_genes, by = 0, all.x = TRUE)
de_up_opt <- merge(x = de_up_opt, y = df_genes, by = 0, all.x = TRUE)
write.table(de_up_wt['Symbol'], file="results/de_up_wt_vs_control.txt", sep="\t", quote=F, col.names=NA) 
write.table(de_up_opt['Symbol'], file="results/de_up_opt_vs_control.txt", sep="\t", quote=F, col.names=NA) 




## Create a column to indicate which genes to label
res_df_opt_TF <- res_df_opt_TF %>% arrange(padj) %>% mutate(genelabels = "")
res_df_opt_TF$genelabels[1:10] <- res_df_opt_TF$gene[1:10]
View(res_df_opt_TF)

ggplot(res_df_opt_TF, aes(x = log2FoldChange, y = -log10(padj))) +
  geom_point(aes(colour = dif_expr)) +
  geom_text_repel(aes(label = genelabels)) +
  ggtitle("Mov10 overexpression") +
  xlab("log2 fold change") + 
  ylab("-log10 adjusted p-value") +
  theme(legend.position = "none",
        plot.title = element_text(size = rel(1.5), hjust = 0.5),
        axis.title = element_text(size = rel(1.25))) 



### !!! Difficult to opperate due to fuckuped numeration of my rows
### Using ggplot2 to plot multiple genes (e.g. top 20):
## Order results by padj values
top20_sig_genes <- sig_res_opt %>% 
  arrange(padj) %>% 	#Arrange rows by padj values
  head(n=20) 		#Extract the first 20 genes
# pull(gene) %>% 		#Extract character vector of ordered genes
## Then, we can extract the normalized count values for these top 20 genes:
## normalized counts for top 20 significant genes
top20_sig_norm <- normalized_counts %>%
  filter(gene %in% top20_sig_genes)
# Gathering the columns to have normalized counts to a single column
gathered_top20_sigOE <- top20_sigOE_norm %>%
  gather(colnames(top20_sigOE_norm)[2:9], key = "samplename", value = "normalized_counts")
## check the column header in the "gathered" data frame
View(gathered_top20_sigOE)
gathered_top20_sigOE <- inner_join(mov10_meta, gathered_top20_sigOE)
## plot using ggplot2
ggplot(gathered_top20_sigOE) +
  geom_point(aes(x = gene, y = normalized_counts, color = sampletype)) +
  scale_y_log10() +
  xlab("Genes") +
  ylab("log10 Normalized Counts") +
  ggtitle("Top 20 Significant DE Genes") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(plot.title = element_text(hjust = 0.5))






res <- results(dds)
head(results(dds, tidy=TRUE)) #let's look at the results table
summary(res)
res <- res[order(res$padj),]
head(res)


#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot"))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))


## Total number of raw counts per sample
colSums(counts(dds))

## Total number of normalized counts per sample
colSums(counts(dds, normalized=T))

## Plot dispersion estimates
plotDispEsts(dds)


## log2fold change calculation and MAplot:
dds <- DESeq(dds)
plotMA(dds, main = "dds")
res <- results(dds)
plotMA(res, alpha = 0.05, main = "res", ylim=c(-7,7))