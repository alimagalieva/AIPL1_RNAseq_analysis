meta <- data.frame(colnames(data[, 1:11]))
meta['sampletype'] <- c('AAV9-AIPL1wt', 'AAV9-AIPL1wt', 'AAV9-AIPL1wt',
'AAV9-AIPL1opt', 'AAV9-AIPL1opt', 'AAV9-AIPL1opt',
'control', 'control',
'AAV9-GFP', 'AAV9-GFP', 'AAV9- GFP')
#meta
row.names(meta) <- meta[,1]
meta <- subset(meta, select = c('sampletype'))
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))
################################# PRE-FILTERING ################################
## creating DESeq DataSet
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run DESeq2 differential expression analysis
dds <- DESeq(dds)
##  **Optional step** - Output normalized counts to save as a file to access outside RStudio
normalized_counts <- counts(dds, normalized=TRUE)
write.table(normalized_counts, file="data/normalized_counts.txt", sep="\t", quote=F, col.names=NA)
## Total number of raw counts per sample
colSums(counts(dds))
## Total number of normalized counts per sample
colSums(counts(dds, normalized=T))
## log2fold change calculation and MAplot:
plotMA(dds, main = "dds")
res <- results(dds)
plotMA(res, alpha = 0.05, main = "res", ylim=c(-7,7))
####################################### QC #####################################
# Transform counts for data visualization
rld <- rlog(dds, blind=TRUE)
plotPCA(rld, intgroup="sampletype")
# Extract the rlog matrix from the object
rld_mat <- assay(rld)
# Compute pairwise correlation values
rld_cor <- cor(rld_mat)
# Plot heatmap
heat.colors <- brewer.pal(6, "Blues")
pheatmap(rld_cor, color = heat.colors, fontsize = 10, fontsize_row = 10, height=20)
#################################### Shrinkage #################################
contrast_wt <- c("sampletype", "AAV9-AIPL1wt", "control")
contrast_opt <- c("sampletype", "AAV9-AIPL1opt", "control")
contrast_wt_opt <- c("sampletype", "AAV9-AIPL1wt", "AAV9-AIPL1opt")
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.05, pAdjustMethod = 'bonferroni')
res_unshrunken_opt <- results(dds, contrast = contrast_opt, alpha = 0.05, pAdjustMethod = 'bonferroni')
res_unshrunken_wt_opt <- results(dds, contrast = contrast_wt_opt, alpha = 0.05, pAdjustMethod = 'bonferroni')
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_shrunken_opt <- lfcShrink(dds, contrast = contrast_opt, res=res_unshrunken_opt, type='normal')
res_shrunken_wt_opt <- lfcShrink(dds, contrast = contrast_wt_opt, res=res_unshrunken_wt_opt, type='normal')
#res_shrunken_wt %>% data.frame() %>% View()
summary(res_shrunken_wt_opt)
sum(res_shrunken_wt_opt$padj < 1.580078e-06, na.rm=TRUE)
0.05/31644
## How many genes are differentially expressed compared to control:
padj.cutoff <- 0.05/31644
lfc.cutoff <- 0.58
# Turn the results object into a data frame
res_df_wt <- data.frame(res_shrunken_wt)
res_df_opt <- data.frame(res_shrunken_opt)
res_df_wt_opt <- data.frame(res_shrunken_wt_opt)
# Subset the significant results
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
sig_res_opt <- filter(res_df_opt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
sig_res_wt_opt <- filter(res_df_wt_opt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
#### Plot expression of a single gene (might need to add mustache to dots)
# ENSG00000129221 - AIPL1 gene
# Save plotcounts to a data frame object
d1 <- plotCounts(dds, gene="ENSG00000129221", intgroup="sampletype", returnData=TRUE)
library(plyr)
library(dplyr)
d2 <- ddply(d1, .variables=sampletype, .fun=sd) #####!!!!!
d1[
]
d2 <- ddply(d1, .variables=d1['sampletype'], .fun=sd) #####!!!!!
d2 <- ddply(d1, .variables='sampletype', .fun=sd) #####!!!!!
d2 <- ddply(d1['count'], .variables='sampletype', .fun=sd) #####!!!!!
d2 <- ddply(d1['count'], .variables=d1['sampletype'], .fun=sd) #####!!!!!
d2 <- ddply(d1[1], .variables=d1[2], .fun=sd) #####!!!!!
d2 <- ddply(d1, .variables=sampletype, .fun=sd) #####!!!!!
d2 <- ddply(d1, .variables=sampletype, .fun=sd) #####!!!!!
d2 <- ddply(d1, .variables='sampletype', .fun=sd) #####!!!!!
d2 <- ddply(d1, .variables=d1$sampletype, .fun=sd) #####!!!!!
################################################################################
########### Gene-level differential expression analysis using DESeq2 ###########
################################################################################
rm(list=ls(all=TRUE))
## Setups
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
#install.packages(<path to downloaded file with DEGreport tar.gz>, repos = NULL)
library(DEGreport)
#BiocManager::install("vsn")
library(vsn)
## reading file:
df <- read.csv("data/counts.Sirius.csv",sep = ";")
## Trying to reorder columns by replicates alphabetically:
coln1 <- sort(c(colnames(df[5:16])))
coln2 <- c(colnames(df[1:4]))
coln = c(coln2, coln1)
coln
data <- df[, coln]
## create column with gene names/ID:
data_geneNames <- data %>%  mutate(geneLabel = ifelse(is.na(Symbol),
name, Symbol))
## some preparations of data dataframe (try to remove duplicates of geneNames):
#drop <- c("gene", "Refseq","Gene.name", "Symbol")
#data = data[,!(names(data) %in% drop)]
#data <- data[complete.cases(data['name']),]
#data <- data %>%  mutate(dupl = duplicated(data['gene'])) ## find duplicates of Refseq number
#data[data$dupl == 'TRUE', ] == #... need to finish or delete
row.names(data) <- data[, 1]
drop <- c('CC1', coln2, 'gene', 'dupl') #remove CC1 from analysis, cause it doesn't cluster well
data = data[,!(names(data) %in% drop)]
meta <- data.frame(colnames(data[, 1:11]))
meta['sampletype'] <- c('AAV9-AIPL1wt', 'AAV9-AIPL1wt', 'AAV9-AIPL1wt',
'AAV9-AIPL1opt', 'AAV9-AIPL1opt', 'AAV9-AIPL1opt',
'control', 'control',
'AAV9-GFP', 'AAV9-GFP', 'AAV9-GFP')
#meta
row.names(meta) <- meta[,1]
meta <- subset(meta, select = c('sampletype'))
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))
## creating DESeq DataSet
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run DESeq2 differential expression analysis
dds <- DESeq(dds)
##  **Optional step** - Output normalized counts to save as a file to access outside RStudio
normalized_counts <- counts(dds, normalized=TRUE)
write.table(normalized_counts, file="data/normalized_counts.txt", sep="\t", quote=F, col.names=NA)
## Total number of raw counts per sample
colSums(counts(dds))
## Total number of normalized counts per sample
colSums(counts(dds, normalized=T))
contrast_wt <- c("sampletype", "AAV9-AIPL1wt", "control")
contrast_opt <- c("sampletype", "AAV9-AIPL1opt", "control")
contrast_wt_opt <- c("sampletype", "AAV9-AIPL1wt", "AAV9-AIPL1opt")
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.05, pAdjustMethod = 'bonferroni')
res_unshrunken_opt <- results(dds, contrast = contrast_opt, alpha = 0.05, pAdjustMethod = 'bonferroni')
res_unshrunken_wt_opt <- results(dds, contrast = contrast_wt_opt, alpha = 0.05, pAdjustMethod = 'bonferroni')
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_shrunken_opt <- lfcShrink(dds, contrast = contrast_opt, res=res_unshrunken_opt, type='normal')
res_shrunken_wt_opt <- lfcShrink(dds, contrast = contrast_wt_opt, res=res_unshrunken_wt_opt, type='normal')
#res_shrunken_wt %>% data.frame() %>% View()
summary(res_shrunken_wt_opt)
sum(res_shrunken_wt_opt$padj < 1.580078e-06, na.rm=TRUE)
0.05/31644
## How many genes are differentially expressed compared to control:
padj.cutoff <- 0.05/31644
lfc.cutoff <- 0.58
# Turn the results object into a data frame
res_df_wt <- data.frame(res_shrunken_wt)
res_df_opt <- data.frame(res_shrunken_opt)
res_df_wt_opt <- data.frame(res_shrunken_wt_opt)
# Subset the significant results
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
sig_res_opt <- filter(res_df_opt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
sig_res_wt_opt <- filter(res_df_wt_opt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
d1 <- plotCounts(dds, gene="ENSG00000129221", intgroup="sampletype", returnData=TRUE)
## calculating sd:
library(plyr)
library(dplyr)
d2 <- ddply(d1, .variables=d1$sampletype, .fun=sd) #####!!!!!
################################################################################
########### Gene-level differential expression analysis using DESeq2 ###########
################################################################################
rm(list=ls(all=TRUE))
## Setups
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
#install.packages(<path to downloaded file with DEGreport tar.gz>, repos = NULL)
library(DEGreport)
#BiocManager::install("vsn")
library(vsn)
## reading file:
df <- read.csv("data/counts.Sirius.csv",sep = ";")
## Trying to reorder columns by replicates alphabetically:
coln1 <- sort(c(colnames(df[5:16])))
coln2 <- c(colnames(df[1:4]))
coln = c(coln2, coln1)
coln
data <- df[, coln]
## create column with gene names/ID:
data_geneNames <- data %>%  mutate(geneLabel = ifelse(is.na(Symbol),
name, Symbol))
## some preparations of data dataframe (try to remove duplicates of geneNames):
#drop <- c("gene", "Refseq","Gene.name", "Symbol")
#data = data[,!(names(data) %in% drop)]
#data <- data[complete.cases(data['name']),]
#data <- data %>%  mutate(dupl = duplicated(data['gene'])) ## find duplicates of Refseq number
#data[data$dupl == 'TRUE', ] == #... need to finish or delete
row.names(data) <- data[, 1]
drop <- c('CC1', coln2, 'gene', 'dupl') #remove CC1 from analysis, cause it doesn't cluster well
data = data[,!(names(data) %in% drop)]
meta <- data.frame(colnames(data[, 1:11]))
meta['sampletype'] <- c('AAV9_AIPL1wt', 'AAV9_AIPL1wt', 'AAV9_AIPL1wt',
'AAV9_AIPL1opt', 'AAV9_AIPL1opt', 'AAV9_AIPL1opt',
'control', 'control',
'AAV9_GFP', 'AAV9_GFP', 'AAV9_GFP')
#meta
row.names(meta) <- meta[,1]
meta <- subset(meta, select = c('sampletype'))
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))
## creating DESeq DataSet
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run DESeq2 differential expression analysis
dds <- DESeq(dds)
##  **Optional step** - Output normalized counts to save as a file to access outside RStudio
normalized_counts <- counts(dds, normalized=TRUE)
write.table(normalized_counts, file="data/normalized_counts.txt", sep="\t", quote=F, col.names=NA)
## Total number of raw counts per sample
colSums(counts(dds))
## Total number of normalized counts per sample
colSums(counts(dds, normalized=T))
## log2fold change calculation and MAplot:
plotMA(dds, main = "dds")
res <- results(dds)
plotMA(res, alpha = 0.05, main = "res", ylim=c(-7,7))
####################################### QC #####################################
# Transform counts for data visualization
rld <- rlog(dds, blind=TRUE)
plotPCA(rld, intgroup="sampletype")
# Extract the rlog matrix from the object
rld_mat <- assay(rld)
# Compute pairwise correlation values
rld_cor <- cor(rld_mat)
# Plot heatmap
heat.colors <- brewer.pal(6, "Blues")
pheatmap(rld_cor, color = heat.colors, fontsize = 10, fontsize_row = 10, height=20)
#################################### Shrinkage #################################
contrast_wt <- c("sampletype", "AAV9-AIPL1wt", "control")
contrast_opt <- c("sampletype", "AAV9-AIPL1opt", "control")
contrast_wt_opt <- c("sampletype", "AAV9-AIPL1wt", "AAV9-AIPL1opt")
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.05, pAdjustMethod = 'bonferroni')
contrast_wt <- c("sampletype", "AAV9_AIPL1wt", "control")
contrast_opt <- c("sampletype", "AAV9_AIPL1opt", "control")
contrast_wt_opt <- c("sampletype", "AAV9_AIPL1wt", "AAV9_AIPL1opt")
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.05, pAdjustMethod = 'bonferroni')
res_unshrunken_opt <- results(dds, contrast = contrast_opt, alpha = 0.05, pAdjustMethod = 'bonferroni')
res_unshrunken_wt_opt <- results(dds, contrast = contrast_wt_opt, alpha = 0.05, pAdjustMethod = 'bonferroni')
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_shrunken_opt <- lfcShrink(dds, contrast = contrast_opt, res=res_unshrunken_opt, type='normal')
res_shrunken_wt_opt <- lfcShrink(dds, contrast = contrast_wt_opt, res=res_unshrunken_wt_opt, type='normal')
#res_shrunken_wt %>% data.frame() %>% View()
summary(res_shrunken_wt_opt)
sum(res_shrunken_wt_opt$padj < 1.580078e-06, na.rm=TRUE)
padj.cutoff <- 0.05/31644
lfc.cutoff <- 0.58
# Turn the results object into a data frame
res_df_wt <- data.frame(res_shrunken_wt)
res_df_opt <- data.frame(res_shrunken_opt)
res_df_wt_opt <- data.frame(res_shrunken_wt_opt)
# Subset the significant results
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
sig_res_opt <- filter(res_df_opt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
sig_res_wt_opt <- filter(res_df_wt_opt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
#write.table(sig_res_wt, file="results/sig_res_wt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
#write.table(sig_res_opt, file="results/sig_res_opt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
#write.table(sig_res_wt_vs_opt, file="results/sig_res_wt_vs_opt.txt", sep="\t", quote=F, col.names=NA)
#### Plot expression of a single gene (might need to add mustache to dots)
# ENSG00000129221 - AIPL1 gene
# Save plotcounts to a data frame object
d1 <- plotCounts(dds, gene="ENSG00000129221", intgroup="sampletype", returnData=TRUE)
## calculating sd:
library(plyr)
library(dplyr)
d2 <- ddply(d1, .variables=d1$sampletype, .fun=sd) #####!!!!!
View(d1)
d2 <- ddply(d1$count, .variables=d1$sampletype, .fun=sd) ########################!!!!!
d2 <- ddply(d1, .variables=d1$sampletype, .fun=sd) ########################!!!!!
d2 <- ddply(d1, .variables=d1$sampletype, .fun=sd) ########################!!!!!
d2 <- ddply(d1, .variables=d1$sampletype, here(sd)) ########################!!!!!
d2 <- ddply(d1, summarize, sd = round(sd(sampletype), 2)) ########################!!!!!
d2 <- ddply(d1, .(sampletype), summarize, sd=round(sd(sampletype), 2)) ########################!!!!!
d1 %>%
group_by(sampletype) %>%
summarise(st_dev = sd(count))
dfx <- data.frame(
group = c(rep('A', 8), rep('B', 15), rep('C', 6)),
sex = sample(c("M", "F"), size = 29, replace = TRUE),
age = runif(n = 29, min = 18, max = 54)
)
ddply(dfx, .(group, sex), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
dfx <- data.frame(
group = c(rep('A', 8), rep('B', 15), rep('C', 6)),
sex = sample(c("M", "F"), size = 29, replace = TRUE),
age = runif(n = 29, min = 18, max = 54)
)
ddply(dfx, .(sex), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
d2 <- ddply(d1, .(sampletype), summarize, mean = round(mean(count), 2),
sd=round(sd(count), 2)
d2 <- ddply(d1, .(sampletype), summarize, mean = round(mean(count), 2),
d2 <- ddply(d1, .(sampletype), summarize, mean = round(mean(count), 2),
sd=round(sd(count), 2))
View(d2)
#plot!
ggplot(d2, aes(x = row.names(d2), y = count, color = sampletype, group = sampletype)) +
geom_bar(position="jitter", stat="identity") +
ylab("Normalized Counts") + xlab("sample") + ggtitle("AIPL1 gene expression")+
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
position=position_dodge(.9))
#plot!
ggplot(d2, aes(x = d2$sampletype, y = mean, color = sampletype, group = sampletype)) +
geom_bar(position="jitter", stat="identity") +
ylab("Normalized Counts") + xlab("sample") + ggtitle("AIPL1 gene expression")+
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
position=position_dodge(.9))
#plot!
ggplot(d2, aes(x = d2$sampletype, y = mean, color = sampletype)) +
geom_bar(position="jitter", stat="identity") +
ylab("Normalized Counts") + xlab("sample") + ggtitle("AIPL1 gene expression")+
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
position=position_dodge(.9))
#plot!
ggplot(d2, aes(x = sampletype, y = mean, color = sampletype)) +
geom_bar(position="jitter", stat="identity") +
ylab("Normalized Counts") + xlab("sample") + ggtitle("AIPL1 gene expression")+
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
position=position_dodge(.9))
ggplot(d2, aes(x = sampletype, y = mean, color = sampletype)) +
geom_bar(position=position_dodge(), stat="identity") +
ylab("Normalized Counts") + xlab("sample") + ggtitle("AIPL1 gene expression")+
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
position=position_dodge(.9))
## extract df with differentially expressed upregulated genes:
res_df_wt_up_TF <- res_df_wt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange >= 0.58)
res_df_opt_up_TF <- res_df_opt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange >= 0.58)
de_up_wt <- res_df_wt_up_TF[which(res_df_wt_up_TF$dif_expr == 'TRUE'), ]
de_up_opt <- res_df_opt_up_TF[which(res_df_opt_up_TF$dif_expr == 'TRUE'), ]
df_genes <- df[, 1:4]
row.names(df_genes) <- df_genes[,1]
drop <- c('name')
df_genes = df_genes[,!(names(df_genes) %in% drop)]
## Merge:
de_up_wt <- merge(x = de_up_wt, y = df_genes, by = 0, all.x = TRUE)
de_up_opt <- merge(x = de_up_opt, y = df_genes, by = 0, all.x = TRUE)
write.table(de_up_wt['Symbol'], file="results/de_up_wt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
write.table(de_up_opt['Symbol'], file="results/de_up_opt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
## extract df with differentially expressed downregulated genes:
res_df_wt_down_TF <- res_df_wt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange <= -0.58)
res_df_opt_down_TF <- res_df_opt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange <= -0.58)
de_down_wt <- res_df_wt_down_TF[which(res_df_wt_down_TF$dif_expr == 'TRUE'), ]
de_down_opt <- res_df_opt_down_TF[which(res_df_opt_down_TF$dif_expr == 'TRUE'), ]
df_genes <- df[, 1:4]
row.names(df_genes) <- df_genes[,1]
drop <- c('name')
df_genes = df_genes[,!(names(df_genes) %in% drop)]
## Merge:
de_down_wt <- merge(x = de_down_wt, y = df_genes, by = 0, all.x = TRUE)
de_down_opt <- merge(x = de_down_opt, y = df_genes, by = 0, all.x = TRUE)
write.table(de_down_wt['Symbol'], file="results/de_down_wt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
write.table(de_down_opt['Symbol'], file="results/de_down_opt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
View(res_df_wt_up_TF)
sig_res_wt_opt
res_df_wt_up_TF <- res_df_wt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange >= 0.58)
res_df_opt_up_TF <- res_df_opt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange >= 0.58)
res_df_wt_opt_up_TF <- res_df_opt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange >= 0.58)
de_up_wt <- res_df_wt_up_TF[which(res_df_wt_up_TF$dif_expr == 'TRUE'), ]
de_up_opt <- res_df_opt_up_TF[which(res_df_opt_up_TF$dif_expr == 'TRUE'), ]
de_up_wt_opt <- res_df_wt_opt_up_TF[which(res_df_wt_opt_up_TF$dif_expr == 'TRUE'), ]
View(meta)
View(de_up_wt)
df_genes <- df[, 1:4]
row.names(df_genes) <- df_genes[,1]
drop <- c('name')
df_genes = df_genes[,!(names(df_genes) %in% drop)]
## Merge:
de_up_wt <- merge(x = de_up_wt, y = df_genes, by = 0, all.x = TRUE)
de_up_opt <- merge(x = de_up_opt, y = df_genes, by = 0, all.x = TRUE)
write.table(de_up_wt['Symbol'], file="results/de_up_wt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
write.table(de_up_opt['Symbol'], file="results/de_up_opt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
## extract df with differentially expressed down-regulated genes:
res_df_wt_down_TF <- res_df_wt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange <= -0.58)
res_df_opt_down_TF <- res_df_opt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange <= -0.58)
de_down_wt <- res_df_wt_down_TF[which(res_df_wt_down_TF$dif_expr == 'TRUE'), ]
de_down_opt <- res_df_opt_down_TF[which(res_df_opt_down_TF$dif_expr == 'TRUE'), ]
df_genes <- df[, 1:4]
row.names(df_genes) <- df_genes[,1]
drop <- c('name')
df_genes = df_genes[,!(names(df_genes) %in% drop)]
## Merge:
de_down_wt <- merge(x = de_down_wt, y = df_genes, by = 0, all.x = TRUE)
de_down_opt <- merge(x = de_down_opt, y = df_genes, by = 0, all.x = TRUE)
View(de_up_opt)
write.table(de_down_wt['Symbol', 'Gene.name', 'padj', 'log2FoldChange'], file="results/de_down_wt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
View(de_down_wt)
write.table(de_down_wt['Symbol', 'Gene.name', 'padj'], file="results/de_down_wt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
de_down_wt['Symbol', 'Gene.name', 'padj', 'log2FoldChange']
write.table(de_down_wt[c('Symbol', 'Gene.name', 'padj', 'log2FoldChange')], file="results/de_down_wt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
write.table(de_down_wt[c('Row.names','Symbol', 'Gene.name', 'padj', 'log2FoldChange')], file="results/de_down_wt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
write.table(de_down_opt[c('Row.names','Symbol', 'Gene.name', 'padj', 'log2FoldChange')], file="results/de_down_opt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
write.table(de_up_wt[c('Row.names','Symbol', 'Gene.name', 'padj', 'log2FoldChange')], file="results/de_up_wt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
write.table(de_up_opt[c('Row.names','Symbol', 'Gene.name', 'padj', 'log2FoldChange')], file="results/de_up_opt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
de_down_wt %>% arrange(log2FoldChange)
de_down_wt <- de_down_wt %>% arrange(log2FoldChange)
de_down_wt <- merge(x = de_down_wt, y = df_genes, by = 0, all.x = TRUE)
de_down_opt <- merge(x = de_down_opt, y = df_genes, by = 0, all.x = TRUE)
de_down_wt <- de_down_wt %>% arrange(log2FoldChange)
de_down_opt <- de_down_opt %>% arrange(log2FoldChange)
write.table(de_down_wt[c('Row.names','Symbol', 'Gene.name', 'padj', 'log2FoldChange')], file="results/de_down_wt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
View(de_down_wt)
## extract df with differentially expressed up-regulated genes:
res_df_wt_up_TF <- res_df_wt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange >= 0.58)
res_df_opt_up_TF <- res_df_opt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange >= 0.58)
res_df_wt_opt_up_TF <- res_df_opt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange >= 0.58)
de_up_wt <- res_df_wt_up_TF[which(res_df_wt_up_TF$dif_expr == 'TRUE'), ]
de_up_opt <- res_df_opt_up_TF[which(res_df_opt_up_TF$dif_expr == 'TRUE'), ]
de_up_wt_opt <- res_df_wt_opt_up_TF[which(res_df_wt_opt_up_TF$dif_expr == 'TRUE'), ]
df_genes <- df[, 1:4]
row.names(df_genes) <- df_genes[,1]
drop <- c('name')
df_genes = df_genes[,!(names(df_genes) %in% drop)]
## Merge:
de_up_wt <- merge(x = de_up_wt, y = df_genes, by = 0, all.x = TRUE)
de_up_opt <- merge(x = de_up_opt, y = df_genes, by = 0, all.x = TRUE)
de_up_wt <- de_up_wt %>% arrange(log2FoldChange)
de_up_opt <- de_up_opt %>% arrange(log2FoldChange)
write.table(de_up_wt[c('Row.names','Symbol', 'Gene.name', 'padj', 'log2FoldChange')], file="results/de_up_wt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
write.table(de_up_opt[c('Row.names','Symbol', 'Gene.name', 'padj', 'log2FoldChange')], file="results/de_up_opt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
## extract df with differentially expressed up-regulated genes:
res_df_wt_up_TF <- res_df_wt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange >= 0.58)
res_df_opt_up_TF <- res_df_opt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange >= 0.58)
res_df_wt_opt_up_TF <- res_df_opt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange >= 0.58)
de_up_wt <- res_df_wt_up_TF[which(res_df_wt_up_TF$dif_expr == 'TRUE'), ]
de_up_opt <- res_df_opt_up_TF[which(res_df_opt_up_TF$dif_expr == 'TRUE'), ]
de_up_wt_opt <- res_df_wt_opt_up_TF[which(res_df_wt_opt_up_TF$dif_expr == 'TRUE'), ]
df_genes <- df[, 1:4]
row.names(df_genes) <- df_genes[,1]
drop <- c('name')
df_genes = df_genes[,!(names(df_genes) %in% drop)]
## Merge:
de_up_wt <- merge(x = de_up_wt, y = df_genes, by = 0, all.x = TRUE)
de_up_opt <- merge(x = de_up_opt, y = df_genes, by = 0, all.x = TRUE)
de_up_wt <- de_up_wt %>% arrange(desc(log2FoldChange))
de_up_opt <- de_up_opt %>% arrange(desc(log2FoldChange))
write.table(de_up_wt[c('Row.names','Symbol', 'Gene.name', 'padj', 'log2FoldChange')], file="results/de_up_wt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
write.table(de_up_opt[c('Row.names','Symbol', 'Gene.name', 'padj', 'log2FoldChange')], file="results/de_up_opt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
## extract df with differentially expressed down-regulated genes:
res_df_wt_down_TF <- res_df_wt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange <= -0.58)
res_df_opt_down_TF <- res_df_opt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange <= -0.58)
de_down_wt <- res_df_wt_down_TF[which(res_df_wt_down_TF$dif_expr == 'TRUE'), ]
de_down_opt <- res_df_opt_down_TF[which(res_df_opt_down_TF$dif_expr == 'TRUE'), ]
df_genes <- df[, 1:4]
row.names(df_genes) <- df_genes[,1]
drop <- c('name')
df_genes = df_genes[,!(names(df_genes) %in% drop)]
## Merge:
de_down_wt <- merge(x = de_down_wt, y = df_genes, by = 0, all.x = TRUE)
de_down_opt <- merge(x = de_down_opt, y = df_genes, by = 0, all.x = TRUE)
de_down_wt <- de_down_wt %>% arrange(log2FoldChange)
de_down_opt <- de_down_opt %>% arrange(log2FoldChange)
write.table(de_down_wt[c('Row.names','Symbol', 'Gene.name', 'padj', 'log2FoldChange')], file="results/de_down_wt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
write.table(de_down_opt[c('Row.names','Symbol', 'Gene.name', 'padj', 'log2FoldChange')], file="results/de_down_opt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
de_up_wt_vs_opt <- merge(x = de_up_wt_opt, y = df_genes, by = 0, all.x = TRUE)
de_up_wt_opt <- merge(x = de_up_wt_opt, y = df_genes, by = 0, all.x = TRUE)
de_up_wt_opt <- de_up_opt %>% arrange(desc(log2FoldChange))
write.table(de_up_wt_opt[c('Row.names','Symbol', 'Gene.name', 'padj', 'log2FoldChange')], file="results/de_up_opt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
write.table(de_up_wt[c('Row.names','Symbol', 'Gene.name', 'padj', 'log2FoldChange')], file="results/de_up_wt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
write.table(de_up_opt[c('Row.names','Symbol', 'Gene.name', 'padj', 'log2FoldChange')], file="results/de_up_opt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
write.table(de_up_wt_opt[c('Row.names','Symbol', 'Gene.name', 'padj', 'log2FoldChange')], file="results/de_up_wt_vs_opt.txt", sep="\t", quote=F, col.names=NA)
res_df_wt_up_TF <- res_df_wt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange >= 0.58)
res_df_opt_up_TF <- res_df_opt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange >= 0.58)
res_df_wt_opt_up_TF <- res_df_opt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange >= 0.58)
res_df_wt_down_TF <- res_df_wt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange <= -0.58)
res_df_opt_down_TF <- res_df_opt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange <= -0.58)
res_df_wt_opt_down_TF <- res_df_wt_opt %>%
mutate(dif_expr = padj < 1.580078e-06 & log2FoldChange <= -0.58)
de_down_wt <- res_df_wt_down_TF[which(res_df_wt_down_TF$dif_expr == 'TRUE'), ]
de_down_opt <- res_df_opt_down_TF[which(res_df_opt_down_TF$dif_expr == 'TRUE'), ]
de_down_wt_opt <- res_df_wt_opt_down_TF[which(res_df_wt_opt_down_TF$dif_expr == 'TRUE'), ]
de_down_wt <- merge(x = de_down_wt, y = df_genes, by = 0, all.x = TRUE)
de_down_opt <- merge(x = de_down_opt, y = df_genes, by = 0, all.x = TRUE)
de_down_wt_opt <- merge(x = de_down_wt_opt, y = df_genes, by = 0, all.x = TRUE)
de_down_wt <- de_down_wt %>% arrange(log2FoldChange)
de_down_opt <- de_down_opt %>% arrange(log2FoldChange)
de_down_wt_opt <- de_down_wt_opt %>% arrange(log2FoldChange)
write.table(de_down_wt[c('Row.names','Symbol', 'Gene.name', 'padj', 'log2FoldChange')], file="results/de_down_wt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
write.table(de_down_opt[c('Row.names','Symbol', 'Gene.name', 'padj', 'log2FoldChange')], file="results/de_down_opt_vs_ctrl.txt", sep="\t", quote=F, col.names=NA)
write.table(de_down_wt_opt[c('Row.names','Symbol', 'Gene.name', 'padj', 'log2FoldChange')], file="results/de_down_wt_vs_opt.txt", sep="\t", quote=F, col.names=NA)
