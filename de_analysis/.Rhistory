'AAV9_AIPL1opt', 'AAV9_AIPL1opt', 'AAV9_AIPL1opt',
'control', 'control',
'AAV9_GFP', 'AAV9_GFP', 'AAV9_GFP')
#meta
row.names(meta) <- meta[,1]
meta <- subset(meta, select = c('sampletype'))
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))
View(meta)
## creating DESeq DataSet
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run DESeq2 differential expression analysis
dds <- DESeq(dds)
contrast_wt <- c("sampletype", "AAV9_AIPL1wt", "control")
contrast_opt <- c("sampletype", "AAV9_AIPL1opt", "control")
contrast_wt_opt <- c("sampletype", "AAV9_AIPL1wt", "AAV9_AIPL1opt")
contrast_gfp_ctrl <- c("sampletype", "AAV9_GFP", "control")
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.001, pAdjustMethod = 'bonferroni')
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
padj.cutoff <- 0.001
lfc.cutoff <- 1
# Turn the results object into a data frame
res_df_wt <- data.frame(res_shrunken_wt)
# Subset the significant results
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
View(sig_res_wt)
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.001)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
# Turn the results object into a data frame
res_df_wt <- data.frame(res_shrunken_wt)
# Subset the significant results
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.001, lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
# Turn the results object into a data frame
res_df_wt <- data.frame(res_shrunken_wt)
# Subset the significant results
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.001, pAdjustMethod = 'bonferroni', lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
# Turn the results object into a data frame
res_df_wt <- data.frame(res_shrunken_wt)
# Subset the significant results
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
View(sig_res_wt)
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.001, pAdjustMethod = 'bonferroni', lfcThreshold = 1)
View(sig_res_wt)
par(mfrow=c(2,2),mar=c(2,2,1,1))
ylim <- c(-2.5,2.5)
resGA <- results(dds, lfcThreshold=.5, altHypothesis="greaterAbs")
resLA <- results(dds, lfcThreshold=.5, altHypothesis="lessAbs")
resG <- results(dds, lfcThreshold=.5, altHypothesis="greater")
resL <- results(dds, lfcThreshold=.5, altHypothesis="less")
drawLines <- function() abline(h=c(-.5,.5),col="dodgerblue",lwd=2)
plotMA(resGA, ylim=ylim); drawLines()
plotMA(resLA, ylim=ylim); drawLines()
plotMA(resG, ylim=ylim); drawLines()
plotMA(resL, ylim=ylim); drawLines()
resGA <- results(dds, lfcThreshold=1, altHypothesis="greaterAbs")
drawLines <- function() abline(h=c(-.5,.5),col="dodgerblue",lwd=2)
plotMA(resGA, ylim=ylim); drawLines()
drawLines <- function() abline(col="dodgerblue",lwd=2)
plotMA(resGA, ylim=ylim); drawLines()
drawLines <- function()
plotMA(resGA, ylim=ylim); drawLines()
par(mfrow=c(2,2),mar=c(2,2,1,1))
ylim <- c(-2.5,2.5)
resGA <- results(dds, lfcThreshold=1, altHypothesis="greaterAbs")
resLA <- results(dds, lfcThreshold=.5, altHypothesis="lessAbs")
resG <- results(dds, lfcThreshold=.5, altHypothesis="greater")
resL <- results(dds, lfcThreshold=.5, altHypothesis="less")
drawLines <- function()
plotMA(resGA, ylim=ylim)
plotMA(resLA, ylim=ylim); drawLines()
plotMA(resG, ylim=ylim); drawLines()
plotMA(resL, ylim=ylim); drawLines()
par(mfrow=c(2,2),mar=c(2,2,1,1))
ylim <- c(-2.5,2.5)
resGA <- results(dds, lfcThreshold=1, altHypothesis="greaterAbs")
drawLines <- function()
plotMA(resGA, ylim=ylim)
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run DESeq2 differential expression analysis
dds <- DESeq(dds)
par(mfrow=c(2,2),mar=c(2,2,1,1))
ylim <- c(-2.5,2.5)
resGA <- results(dds, lfcThreshold=1, altHypothesis="greaterAbs")
plotMA(resGA, ylim=ylim)
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run DESeq2 differential expression analysis
dds_Wald <- DESeq(dds)
dds_LRT <- DESeq(dds, test="LRT", reduced=~1)
par(mfrow=c(2,2),mar=c(2,2,1,1))
ylim <- c(-2.5,2.5)
resW <- results(dds_Wald, lfcThreshold=1, altHypothesis="greaterAbs")
plotMA(resW, ylim=ylim)
par(mfrow=c(2,2),mar=c(2,2,1,1))
ylim <- c(-2.5,2.5)
resL <- results(dds_LRT, lfcThreshold=1, altHypothesis="greaterAbs")
res_unshrunken_wt <- results(dds_Wald, contrast = contrast_wt, alpha = 0.001, pAdjustMethod = 'bonferroni', lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds_Wald, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
res_unshrunken_wt <- results(dds_LRT, contrast = contrast_wt, alpha = 0.001, pAdjustMethod = 'bonferroni', lfcThreshold = 1)
res_unshrunken_wt <- results(dds_Wald, contrast = contrast_wt, alpha = 0.001, pAdjustMethod = 'bonferroni')
res_shrunken_wt <- lfcShrink(dds_Wald, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
res_unshrunken_wt <- results(dds_LRT, contrast = contrast_wt, alpha = 0.001, pAdjustMethod = 'bonferroni')
res_shrunken_wt <- lfcShrink(dds_LRT, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
res_unshrunken_wt <- results(dds_Wald, contrast = contrast_wt, alpha = 0.001, pAdjustMethod = 'bonferroni')
res_shrunken_wt <- lfcShrink(dds_Wald, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.001, pAdjustMethod = 'bonferroni', lfcThreshold = 1)
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run DESeq2 differential expression analysis
dds <- DESeq(dds)
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.001, pAdjustMethod = 'bonferroni', lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
rm(list=ls(all=TRUE))
## Setups
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
#install.packages(<path to downloaded file with DEGreport tar.gz>, repos = NULL)
library(DEGreport)
#BiocManager::install("vsn")
library(vsn)
library(plyr)
library(dplyr)
## reading file:
df <- read.csv("data/counts.Sirius.csv",sep = ";")
## Trying to reorder columns by replicates alphabetically:
coln1 <- sort(c(colnames(df[5:16])))
coln2 <- c(colnames(df[1:4]))
coln = c(coln2, coln1)
coln
data <- df[, coln]
## create column with gene names/ID:
data_geneNames <- data %>%  mutate(geneLabel = ifelse(is.na(Symbol),
name, Symbol))
## some preparations of data dataframe (try to remove duplicates of geneNames):
#drop <- c("gene", "Refseq","Gene.name", "Symbol")
#data = data[,!(names(data) %in% drop)]
#data <- data[complete.cases(data['name']),]
#data <- data %>%  mutate(dupl = duplicated(data['gene'])) ## find duplicates of Refseq number
#data[data$dupl == 'TRUE', ] == #... need to finish or delete
row.names(data) <- data[, 1]
drop <- c('CC1', coln2, 'gene', 'dupl') #remove CC1 from analysis, cause it doesn't cluster well
data = data[,!(names(data) %in% drop)]
meta <- data.frame(colnames(data[, 1:11]))
meta['sampletype'] <- c('AAV9_AIPL1wt', 'AAV9_AIPL1wt', 'AAV9_AIPL1wt',
'AAV9_AIPL1opt', 'AAV9_AIPL1opt', 'AAV9_AIPL1opt',
'control', 'control',
'AAV9_GFP', 'AAV9_GFP', 'AAV9_GFP')
#meta
row.names(meta) <- meta[,1]
meta <- subset(meta, select = c('sampletype'))
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))
################################# PRE-FILTERING ################################
## creating DESeq DataSet
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run DESeq2 differential expression analysis
dds <- DESeq(dds)
contrast_wt <- c("sampletype", "AAV9_AIPL1wt", "control")
contrast_opt <- c("sampletype", "AAV9_AIPL1opt", "control")
contrast_wt_opt <- c("sampletype", "AAV9_AIPL1wt", "AAV9_AIPL1opt")
contrast_gfp_ctrl <- c("sampletype", "AAV9_GFP", "control")
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.001, pAdjustMethod = 'bonferroni', lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
padj.cutoff <- 0.001
lfc.cutoff <- 1
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.001, pAdjustMethod = 'bonferroni', lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
par(mfrow=c(2,2),mar=c(2,2,1,1))
ylim <- c(-2.5,2.5)
res05 <- results(dds, lfcThreshold=.5, altHypothesis="greaterAbs")
res058 <- results(dds, lfcThreshold=.58, altHypothesis="greaterAbs")
res1 <- results(dds, lfcThreshold=1, altHypothesis="greaterAbs")
plotMA(res05, ylim=ylim)
plotMA(res058, ylim=ylim)
plotMA(res1, ylim=ylim)
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.001, pAdjustMethod = 'bonferroni', lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.001, lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
View(sig_res_wt)
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.001, pAdjustMethod = 'bonferroni', lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.05, pAdjustMethod = 'bonferroni', lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
res_df_gfp_ctrl_up_TF <- res_df_gfp_ctrl %>%
mutate(dif_expr = padj < 0.05 & log2FoldChange >= 0.58)
sig_res_wt <- filter(res_df_wt, padj < 0.05 & abs(log2FoldChange) > lfc.cutoff)
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.001, pAdjustMethod = 'bonferroni', lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < 0.05 & abs(log2FoldChange) > lfc.cutoff)
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.05, pAdjustMethod = 'bonferroni', lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < 0.05 & abs(log2FoldChange) > lfc.cutoff)
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.05, lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < 0.05 & abs(log2FoldChange) > lfc.cutoff)
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.001, lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > lfc.cutoff)
install.packages(c("rlang", "tibble", "vctrs"))
?results
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.001, lfcThreshold = 1, altHypothesis = "greaterAbs")
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > lfc.cutoff)
View(sig_res_wt)
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.01, lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < 0.01 & abs(log2FoldChange) > lfc.cutoff)
View(dds)
?p.adjust
?lfcShrink
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.001, lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > lfc.cutoff)
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.001, lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='ashr')
install.packages("ashr")
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.001, lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='ashr')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > lfc.cutoff)
View(sig_res_wt)
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.001, lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > lfc.cutoff)
res_unshrunken_wt <- results(dds, contrast = contrast_wt)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > lfc.cutoff)
#rr <- res_shrunken_wt %>% data.frame()
#rr <- filter(rr, padj<0.001)
summary(res_shrunken_wt)
res_unshrunken_wt <- results(dds, contrast = contrast_wt, alpha = 0.001, lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > lfc.cutoff)
res_df_gfp_ctrl_up_TF <- res_df_gfp_ctrl %>%
mutate(dif_expr = padj < 0.001 & log2FoldChange >= 0.58)
res_df_wt_up_TF <- res_df_wt %>%
mutate(dif_expr = padj < 0.001 & log2FoldChange >= 1)
de_up_wt <- res_df_wt_up_TF[which(res_df_wt_up_TF$dif_expr == 'TRUE'), ]
View(de_up_wt)
res_unshrunken_wt <- results(dds, contrast = contrast_wt)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < 0.05 & abs(log2FoldChange) > 0.5)
sig_res_wt <- filter(res_df_wt, padj < 0.05 & abs(log2FoldChange) > 0.58)
sig_res_wt <- filter(res_df_wt, padj < 0.05 & abs(log2FoldChange) > 1)
sig_res_wt <- filter(res_df_wt, padj < 0.01 & abs(log2FoldChange) > 1)
sig_res_wt <- filter(res_df_wt, padj < 0.01 & abs(log2FoldChange) > 0.58)
sig_res_wt <- filter(res_df_wt, padj < 0.01 & abs(log2FoldChange) > 0.5)
sig_res_wt <- filter(res_df_wt, padj < 0.005 & abs(log2FoldChange) > 0.5)
sig_res_wt <- filter(res_df_wt, padj < 0.005 & abs(log2FoldChange) > 0.58)
sig_res_wt <- filter(res_df_wt, padj < 0.005 & abs(log2FoldChange) > 1)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > 1)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > 0.58)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > 0.5)
res_unshrunken_wt <- results(dds, contrast = contrast_wt, pAdjustMethod = 'bonferroni')
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > 0.5)
res_unshrunken_wt <- results(dds, contrast = contrast_wt,  alpha = 0.05, lfcThreshold = 0.5)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > 0.5)
res_unshrunken_wt <- results(dds, contrast = contrast_wt,  alpha = 0.05, lfcThreshold = 0.5)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > 0.5)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > 0.58)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > 1)
sig_res_wt <- filter(res_df_wt, padj < 0.005 & abs(log2FoldChange) > 0.5)
sig_res_wt <- filter(res_df_wt, padj < 0.005 & abs(log2FoldChange) > 0.58)
sig_res_wt <- filter(res_df_wt, padj < 0.005 & abs(log2FoldChange) > 1)
sig_res_wt <- filter(res_df_wt, padj < 0.05 & abs(log2FoldChange) > 1)
sig_res_wt <- filter(res_df_wt, padj < 0.05 & abs(log2FoldChange) > 0.58)
sig_res_wt <- filter(res_df_wt, padj < 0.05 & abs(log2FoldChange) > 0.5)
sig_res_wt <- filter(res_df_wt, padj < 0.01 & abs(log2FoldChange) > 0.5)
sig_res_wt <- filter(res_df_wt, padj < 0.01 & abs(log2FoldChange) > 0.58)
sig_res_wt <- filter(res_df_wt, padj < 0.01 & abs(log2FoldChange) > 1)
res_unshrunken_wt <- results(dds, contrast = contrast_wt,  alpha = 0.001, lfcThreshold = 1)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < 0.05 & abs(log2FoldChange) > 0.5)
sig_res_wt <- filter(res_df_wt, padj < 0.05 & abs(log2FoldChange) > 0.58)
sig_res_wt <- filter(res_df_wt, padj < 0.05 & abs(log2FoldChange) > 1)
sig_res_wt <- filter(res_df_wt, padj < 0.01 & abs(log2FoldChange) > 1)
sig_res_wt <- filter(res_df_wt, padj < 0.01 & abs(log2FoldChange) > .58)
sig_res_wt <- filter(res_df_wt, padj < 0.01 & abs(log2FoldChange) > .5)
sig_res_wt <- filter(res_df_wt, padj < 0.005 & abs(log2FoldChange) > 1)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > 1)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > 1)
res_unshrunken_wt <- results(dds, contrast = contrast_wt,  alpha = 0.05, lfcThreshold = 0.5)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='normal')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > 1)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > .58)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > .5)
res_unshrunken_wt <- results(dds, contrast = contrast_wt,  alpha = 0.05, lfcThreshold = 0.5)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='ashr')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > .5)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > 1)
sig_res_wt <- filter(res_df_wt, padj < 0.05 & abs(log2FoldChange) > .5)
sig_res_wt <- filter(res_df_wt, padj < 0.05 & abs(log2FoldChange) > .58)
sig_res_wt <- filter(res_df_wt, padj < 0.05 & abs(log2FoldChange) > 1)
sig_res_wt <- filter(res_df_wt, padj < 0.01 & abs(log2FoldChange) > 1)
sig_res_wt <- filter(res_df_wt, padj < 0.01 & abs(log2FoldChange) > 0.58)
sig_res_wt <- filter(res_df_wt, padj < 0.01 & abs(log2FoldChange) > 0.5)
sig_res_wt <- filter(res_df_wt, padj < 0.005 & abs(log2FoldChange) > 0.5)
sig_res_wt <- filter(res_df_wt, padj < 0.005 & abs(log2FoldChange) > 0.58)
sig_res_wt <- filter(res_df_wt, padj < 0.005 & abs(log2FoldChange) > 1)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > 1)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > 0.58)
sig_res_wt <- filter(res_df_wt, padj < 0.001 & abs(log2FoldChange) > 0.5)
?results
?lfcShrink
View(sig_res_wt)
res_unshrunken_wt <- results(dds, contrast = contrast_wt,  alpha = 0.05, lfcThreshold = 0.5)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='ashr')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, padj < 0.05 & abs(log2FoldChange) > 0.5)
View(sig_res_wt)
View(df)
##  **Optional step** - Output normalized counts to save as a file to access outside RStudio
normalized_counts <- counts(dds, normalized=TRUE)
View(normalized_counts)
sig_res_wt <- filter(res_df_wt, baseMean>5)
View(sig_res_wt)
sig_res_wt <- filter(res_df_wt, baseMean>5 & padj < 0.05 & abs(log2FoldChange) > 0.5)
sig_res_wt <- filter(res_df_wt, baseMean>5 & padj < 0.05)
sig_res_wt <- filter(res_df_wt, baseMean>5 & padj < 0.01)
sig_res_wt <- filter(res_df_wt, baseMean>5 & padj < 0.01 & abs(log2FoldChange) > 0.5)
sig_res_wt <- filter(res_df_wt, baseMean>5 & padj < 0.01 & abs(log2FoldChange) > 1)
sig_res_wt <- filter(res_df_wt, baseMean>5 & padj < 0.005)
sig_res_wt <- filter(res_df_wt, baseMean>5 & padj < 0.001)
## reading file:
df <- read.tsv("data/fromVasia/aipl3_gfp.tsv")
## reading file:
df <- read_tsv("data/fromVasia/aipl3_gfp.tsv")
View(df)
sig_res <- filter(res_df_wt, baseMean>5)
sig_res <- filter(df, baseMean>5)
## reading file:
df <- read_tsv("data/fromVasia/aipl3_gfp.tsv")
sig_res <- filter(df, baseMean>5)
sig_res <- filter(df, baseMean>5 & padj < 0.05)
sig_res <- filter(df, baseMean>5 & padj < 0.01)
sig_res <- filter(df, baseMean>5 & padj < 0.005)
sig_res <- filter(df, baseMean>5 & padj < 0.001)
## reading file:
df <- read_tsv("data/fromVasia/aipl6_gfp.tsv")
sig_res <- filter(df, baseMean>5)
sig_res <- filter(df, baseMean>5)
sig_res <- filter(df, baseMean>5 & padj < 0.05)
sig_res <- filter(df, baseMean>5 & padj < 0.01)
sig_res <- filter(df, baseMean>5 & padj < 0.001 & log2FoldChange > 2)
sig_res <- filter(df, baseMean>5 & padj < 0.01 & log2FoldChange > 2)
View(sig_res)
sig_res <- filter(df, baseMean>5 & padj < 0.01 & log2FoldChange > 1)
sig_res <- filter(df, baseMean>5 & padj < 0.001 & log2FoldChange > 1)
sig_res <- filter(df, baseMean>5 & padj < 0.01 & log2FoldChange > 1.5)
sig_res <- filter(df, baseMean>5 & padj < 0.01 & log2FoldChange > 1)
sig_res <- filter(df, baseMean>5 & padj < 0.001 & log2FoldChange > 1)
sig_res <- filter(df, baseMean>5 & padj < 0.01 & log2FoldChange > 1)
sig_res <- filter(df, baseMean>5 & padj < 0.01 & log2FoldChange > 0.58)
sig_res <- filter(df, baseMean>5 & padj < 0.001 & log2FoldChange > 0.58)
sig_res <- filter(df, baseMean>5 & padj < 0.001 & log2FoldChange > 1)
res_unshrunken_wt <- results(dds, contrast = contrast_wt,  alpha = 0.05, lfcThreshold = 0.5)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='ashr')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, baseMean>5 & padj < 0.05 & abs(log2FoldChange) > 0.5)
res_unshrunken_wt <- results(dds, contrast = contrast_wt,  alpha = 0.05, lfcThreshold = 0.58)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='ashr')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, baseMean>5 & padj < 0.05 & abs(log2FoldChange) > 0.58)
?results
################################################################################
########### Gene-level differential expression analysis using DESeq2 ###########
################################################################################
rm(list=ls(all=TRUE))
## Setups
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
#install.packages(<path to downloaded file with DEGreport tar.gz>, repos = NULL)
library(DEGreport)
#BiocManager::install("vsn")
library(vsn)
library(plyr)
library(dplyr)
## reading file:
df <- read.csv("data/counts.Sirius.csv",sep = ";")
## Trying to reorder columns by replicates alphabetically:
coln1 <- sort(c(colnames(df[5:16])))
coln2 <- c(colnames(df[1:4]))
coln = c(coln2, coln1)
coln
data <- df[, coln]
## create column with gene names/ID:
data_geneNames <- data %>%  mutate(geneLabel = ifelse(is.na(Symbol),
name, Symbol))
## some preparations of data dataframe (try to remove duplicates of geneNames):
#drop <- c("gene", "Refseq","Gene.name", "Symbol")
#data = data[,!(names(data) %in% drop)]
#data <- data[complete.cases(data['name']),]
#data <- data %>%  mutate(dupl = duplicated(data['gene'])) ## find duplicates of Refseq number
#data[data$dupl == 'TRUE', ] == #... need to finish or delete
row.names(data) <- data[, 1]
drop <- c('CC1', coln2, 'gene', 'dupl') #remove CC1 from analysis, cause it doesn't cluster well
data = data[,!(names(data) %in% drop)]
meta <- data.frame(colnames(data[, 1:11]))
meta['sampletype'] <- c('AAV9_AIPL1wt', 'AAV9_AIPL1wt', 'AAV9_AIPL1wt',
'AAV9_AIPL1opt', 'AAV9_AIPL1opt', 'AAV9_AIPL1opt',
'control', 'control',
'AAV9_GFP', 'AAV9_GFP', 'AAV9_GFP')
#meta
row.names(meta) <- meta[,1]
meta <- subset(meta, select = c('sampletype'))
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))
################################# PRE-FILTERING ################################
## creating DESeq DataSet
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run DESeq2 differential expression analysis
dds <- DESeq(dds)
##  **Optional step** - Output normalized counts to save as a file to access outside RStudio
#normalized_counts <- counts(dds, normalized=TRUE)
#write.table(normalized_counts, file="data/normalized_counts.txt", sep="\t", quote=F, col.names=NA)
## Total number of raw counts per sample
#colSums(counts(dds))
## Total number of normalized counts per sample
#colSums(counts(dds, normalized=T))
## log2fold change calculation and MAplot: - what for?
#plotMA(dds, main = "dds")
#res <- results(dds)
#plotMA(res, alpha = 0.05, main = "res", ylim=c(-7,7))
####################################### QC #####################################
# Transform counts for data visualization
rld <- rlog(dds, blind=TRUE)
plotPCA(rld, intgroup="sampletype")
# Extract the rlog matrix from the object
rld_mat <- assay(rld)
# Compute pairwise correlation values
rld_cor <- cor(rld_mat)
# Plot heatmap
heat.colors <- brewer.pal(6, "Blues")
pheatmap(rld_cor, color = heat.colors, fontsize = 10, fontsize_row = 10, height=20)
################################### Shrinkage ##################################
contrast_wt <- c("sampletype", "AAV9_AIPL1wt", "control")
contrast_opt <- c("sampletype", "AAV9_AIPL1opt", "control")
contrast_wt_opt <- c("sampletype", "AAV9_AIPL1wt", "AAV9_AIPL1opt")
contrast_gfp_ctrl <- c("sampletype", "AAV9_GFP", "control")
################################################################################
################################################################################
################################################################################
res_unshrunken_wt <- results(dds, contrast = contrast_wt,  alpha = 0.05, lfcThreshold = 0.58)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast_wt, res=res_unshrunken_wt, type='ashr')
res_df_wt <- data.frame(res_shrunken_wt)
sig_res_wt <- filter(res_df_wt, baseMean>5 & padj < 0.05 & abs(log2FoldChange) > 0.58)
res_df_wt_up_TF <- res_df_wt %>%
mutate(dif_expr = padj < 0.001 & log2FoldChange >= 1)
de_up_wt <- res_df_wt_up_TF[which(res_df_wt_up_TF$dif_expr == 'TRUE'), ]
df_genes <- df[, 1:4]
row.names(df_genes) <- df_genes[,1]
drop <- c('name')
df_genes = df_genes[,!(names(df_genes) %in% drop)]
## Merge:
de_up_wt <- merge(x = de_up_wt, y = df_genes, by = 0, all.x = TRUE)
de_up_wt <- de_up_wt %>% arrange(desc(log2FoldChange))
View(res_unshrunken_wt)
View(res_df_wt)
hist(sig_res_wt)
hist(sig_res_wt$padj)
