rm(list=ls(all=TRUE))
## Setups
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
library(plyr)
library(dplyr)
library(stringr)
library(clusterProfiler)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(DOSE)
library(enrichplot)
library(ComplexHeatmap)
library(VennDiagram)
library(RColorBrewer)
library(igraph)
library(STRINGdb)
#library(chromoMap)
#library(DEGreport)
#library(vsn)
library(tximport)
## reading files:
dfFC <- read.delim("../countsFromFeatureCounts.out", sep = "\t", header = T, skip = 1)
df <- read.table("data/counts.txt", sep = "\t", header = F)
df <- df[1:(nrow(df)-5),]
df <- merge(x = df, y = data.frame(dfFC$Geneid, dfFC$Length), by = 1, all.x = TRUE)
colnames(df) <- c('geneID', 'name', 'AIPL1_6_2', 'AIPL1_6_3', 'AIPL_3_1',
'AIPL_3_3', 'CC1', 'GFP_1', 'GFP_3', 'AIPL1_6_1',
'AIPL_3_2', 'CC2', 'CC3', 'GFP_2', 'length')
df[df[1]=='optAIPL1g', 'length'] <- '1158'
df[df[1]=='wtAIPL1g', 'length'] <- '1158'
df[df[1]=='GFPg', 'length'] <- '741'
df[df[1]=='GFP_CBg', 'length'] <- '741'
df[df[1]=='optAIPL1g', 'name'] <- 'AIPL1co'
df[df[1]=='wtAIPL1g', 'name'] <- 'AIPL1wt'
df[df[1]=='GFPg', 'name'] <- 'GFP'
df[df[1]=='GFP_CBg', 'name'] <- 'GFP_CB'
## Trying to reorder columns by replicates alphabetically:
colnS <- sort(c(colnames(df[3:14])))
colnT <- c(colnames(df[1:2]), colnames(df[15]))
coln = c(colnT, colnS)
df <- df[, coln]
#row.names(data) <- data[, 'name'] ### can't do because some of them are non-unique
df[df[2]=='AIPL1co', 'geneID'] <- 'AIPL1co'
df[df[2]=='AIPL1wt', 'geneID'] <- 'AIPL1wt'
df[df[2]=='GFP', 'geneID'] <- 'GFP'
df[df[2]=='GFP_CB', 'geneID'] <- 'GFP_CB'
rownames(df) <- df$geneID
data = df[, (names(df) %in% colnS)]
meta <- data.frame(row.names=colnames(data), sampletype= c('AAV9_AIPL1wt', 'AAV9_AIPL1wt', 'AAV9_AIPL1wt',
'AAV9_AIPL1co', 'AAV9_AIPL1co', 'AAV9_AIPL1co',
'non_transd_ctrl', 'non_transd_ctrl', 'non_transd_ctrl',
'AAV9_GFP', 'AAV9_GFP', 'AAV9_GFP'), repl=rep(c(1,2,3), 4))
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))
hist(rowSums(data), breaks = 1000)
data = data[, !(names(data) %in% c('CC1'))]
meta <- data.frame(colnames(data))
meta['sampletype'] <- c('AAV9_AIPL1wt', 'AAV9_AIPL1wt', 'AAV9_AIPL1wt',
'AAV9_AIPL1co', 'AAV9_AIPL1co', 'AAV9_AIPL1co',
'non_transd_ctrl', 'non_transd_ctrl',
'AAV9_GFP', 'AAV9_GFP', 'AAV9_GFP')
row.names(meta) <- meta[,1]
meta <- subset(meta, select = c('sampletype'))
meta$repl <- c(1,2,3,1,2,3,2,3,1,2,3)
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))
summary(data)
## creating DESeq DataSet
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run DESeq2 differential expression analysis
dds <- DESeq(dds)
sum(apply(counts(dds, normalized = TRUE), 1, function(row) all(row ==0)))
contr_wt_gfp <- c("sampletype", "AAV9_AIPL1wt", "AAV9_GFP")
contr_opt_gfp <- c("sampletype", "AAV9_AIPL1co", "AAV9_GFP")
contr_opt_wt <- c("sampletype", "AAV9_AIPL1co", "AAV9_AIPL1wt")
contr_gfp_ctrl <- c("sampletype", "AAV9_GFP", "non_transd_ctrl")
contr_wt_ctrl <- c("sampletype", "AAV9_AIPL1wt", "non_transd_ctrl")
contr_opt_ctrl <- c("sampletype", "AAV9_AIPL1co", "non_transd_ctrl")
lfc <- 1.58
pval <- 0.005
samp <- 'opt_wt'
shrink <- function(samp, pval, lfc) {
unshrunken <- results(dds, contrast = get(paste('contr_', samp, sep='')))
shrunken <- lfcShrink(dds, contrast = get(paste('contr_', samp, sep='')),
res=unshrunken, type='normal')
res_df <<- data.frame(shrunken)
#print(samp, res_df)
}
filtr <- function(samp, pval, lfc){
res_df$ens <- gsub("\\..*","", rownames(res_df))
res_df$symbol <- mapIds(org.Hs.eg.db, keys = res_df$ens, keytype = 'ENSEMBL', column = 'SYMBOL')
res_df$map <- mapIds(org.Hs.eg.db, keys = res_df$ens, keytype = 'ENSEMBL', column = 'MAP')
res_df[rownames(res_df[is.na(res_df$symbol), ]), 'symbol'] <- rownames(res_df[is.na(res_df$symbol),])
sigs <<- filter(res_df, padj < pval & abs(log2FoldChange) > lfc)
res_df[rownames(res_df[is.na(res_df$symbol), ]), 'symbol'] <<- rownames(res_df[is.na(res_df$symbol),])
res_df <<- res_df
}
volcano_new <- function(samp, pval, lfc) {
sigs_top5 <- subset(sigs %>% arrange(log2FoldChange) %>% head(n=5))
sigs_low5 <- subset(sigs %>% arrange(desc(log2FoldChange)) %>% head(n=5))
sigs_10 <- rbind(sigs_top5, sigs_low5)
res_df <- merge(res_df, sigs_10, by = 'row.names', all.x = T)
row.names(res_df) <- res_df$Row.names
res_df <- res_df[c('baseMean.x', 'log2FoldChange.x', 'lfcSE.x', 'stat.x', 'pvalue.x', 'padj.x', 'symbol.y')]
colnames(res_df) <- c('baseMean', 'log2FoldChange', 'lfcSE', 'stat', 'pvalue', 'padj', 'name10')
res_df$super <- res_df$log2FoldChange >  lfc  & res_df$padj < pval
res_df$sub   <- res_df$log2FoldChange < -lfc  & res_df$padj < pval
res_df$threshold <- as.factor(abs(res_df$log2FoldChange) > lfc & res_df$padj < pval)
volc <- ggplot(data=res_df, aes(x=log2FoldChange, y=-log10(padj))) +
geom_point(data=res_df, size=1, colour="gray") +
geom_point(data=res_df[res_df$super==TRUE, ], size=1.5, colour="#CC0000") +
geom_point(data=res_df[res_df$sub  ==TRUE, ], size=1.5, colour="#000099") +
geom_point(data=res_df[!is.na(res_df$name10), ], size=2, shape=1) +
geom_text_repel(aes(label = name10), colour='#00000000') +
xlab("log2 fold change") +
ylab("-log10 p-value adjusted") +
ggtitle(paste('Differential expression of ', samp, '\nl2fc = ', lfc, ', padj = ', pval, sep='')) +
scale_x_continuous() +
scale_y_continuous() +
theme_bw() +
theme(axis.title.y = element_text(size=16),
axis.title.x = element_text(size=16, colour="black"),
axis.text = element_text(size=12),
legend.title =element_blank() ,
legend.text = element_text(size = 12),
plot.title = element_text(face="bold", size = 17, hjust = 0.5)) +
geom_hline(yintercept = -log10(pval), linetype="dotted") +
geom_vline(xintercept = c(lfc, -lfc), linetype="dotted")
#ggsave(volc, file=paste('plots/volcano_', samp, '_lfc=', lfc,'_padj=', pval, '.png', sep=""),
#       width = 7, height = 7, dpi = 600)
ggsave(volc, file=paste('plots/volcano_pl_', samp, '_lfc=', lfc,'_padj=', pval, '.svg', sep=""), width=10, height=10)
}
heat <- function(samp, pval, lfc) {
genesToMap <- c(row.names(sigs))
matr <- counts(dds, normalized=T)[genesToMap, ]
matr.z <- t(apply(matr, 1, scale))
matr.z <- na.omit(matr.z)
colnames(matr.z) <- paste(meta[rownames(meta)==colnames(matr),'sampletype'], meta[rownames(meta)==colnames(matr),'repl'], sep='-')
fig <- Heatmap(matr.z, cluster_rows = T, cluster_columns = T,
column_labels = colnames(matr.z), column_names_rot = 45, column_names_gp = gpar(fontsize = 8),
name = 'Z.score', row_labels = sigs[as.factor(rownames(matr.z)), 'symbol'],
row_names_gp = gpar(fontsize = 3),
column_title = paste('Heatmap of ', as.character(samp),' DEGs, l2fc = ',as.character(lfc),', padj = ',as.character(pval), sep=''))
png(paste('plots/heat_', samp, '_lfc=', lfc, '_padj=', pval, '.png', sep=''),
res = 2500, width = 15000, height = 20000)
print(fig)
dev.off()
}
go_bar <- function(samp, pval, lfc) {
for (dir in c('up', 'down')) {
genes_to_test <- get(paste('sigs_', dir, '_', samp, sep=''))[,1]
GO_results <- enrichGO(gene = genes_to_test, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont="BP")
as.data.frame(GO_results)
if (nrow(GO_results) != 0) {
fig <- barplot(GO_results, showCategory = 20) +
ggtitle(paste('GO of ', samp, ', ', dir, '-regulated', ', l2fc = ', lfc, ', padj = ', pval, sep='')) +
theme(plot.title = element_text(face = 'bold', hjust = 0.5),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 9))
ggsave(fig,
file=paste('plots/GO_', samp, '_', dir, '_lfc=', lfc, '_padj=', pval, '.png', sep=''),
width = 14, height = 7, dpi = 600)
}
}
}
for (samp in c('wt_ctrl','opt_ctrl', 'opt_wt', 'wt_gfp', 'opt_gfp', 'gfp_ctrl')) {
shrink(samp, pval, lfc)
filtr(samp, pval, lfc)
#assign(paste('res_', samp, sep=''), res_df[,c(-7)])
assign(paste('sigs_', samp, sep=''), sigs[,c('symbol', 'map', 'baseMean', 'log2FoldChange', 'lfcSE', 'stat', 'pvalue', 'padj')])
#write.table(get(paste('sigs_', samp, sep=''))[c('symbol', 'map', 'padj', 'log2FoldChange')],
#            file=paste('results/sigs_', samp, '_l2fc=', lfc, '_padj=', pval, '.txt', sep=''), sep="\t", quote=F, col.names=NA)
assign(paste('sigs_down_', samp, sep=''), filter(get(paste('sigs_', samp, sep='')), padj < pval & log2FoldChange < lfc))
#write.table(get(paste('sigs_down_', samp, sep=''))[c('symbol', 'map', 'padj', 'log2FoldChange')],
#            file=paste('results/sigs_', samp, '_down_l2fc=', lfc, '_padj=', pval, '.txt', sep=''), sep="\t", quote=F, col.names=NA)
assign(paste('sigs_up_', samp, sep=''), filter(get(paste('sigs_', samp, sep='')), padj < pval & log2FoldChange > lfc))
#write.table(get(paste('sigs_up_', samp, sep=''))[c('symbol', 'map', 'padj', 'log2FoldChange')],
#            file=paste('results/sigs_', samp, '_up_l2fc=', lfc, '_padj=', pval, '.txt', sep=''), sep="\t", quote=F, col.names=NA)
#print(nrow(get(paste('sigs_', samp, sep=''))) == nrow(get(paste('sigs_up_', samp, sep=''))) + nrow(get(paste('sigs_down_', samp, sep=''))))
#volcano(samp, pval, lfc)
#heat(samp, pval, lfc)
#go_bar(samp, pval, lfc)
} ### never delete middle strings!
View(res_df)
View(data)
data$symbol <- mapIds(org.Hs.eg.db, keys = data$rownames, keytype = 'ENSEMBL', column = 'SYMBOL')
data$ens <- gsub("\\..*","", rownames(data))
data$symbol <- mapIds(org.Hs.eg.db, keys = data$ens, keytype = 'ENSEMBL', column = 'SYMBOL')
View(sigs_down_opt_gfp)
View(sigs_down_wt_ctrl)
View(sigs_down_opt_ctrl)
View(sigs_down_opt_ctrl)
View(sigs_down_wt_ctrl)
View(sigs_down_opt_ctrl)
View(sigs_down_wt_ctrl)
View(sigs_down_wt_gfp)
View(sigs_down_opt_gfp)
