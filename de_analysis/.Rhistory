res_tableWT_unshrunken <- results(dds, contrast=contrast_wt, alpha = 0.05)
res_tableWT <- lfcShrink(dds, contrast=contrast_wt, res=res_tableWT_unshrunken)
contrast_opt <- c("sampletype", "opt", "control")
res_tableOPT_unshrunken <- results(dds, contrast=contrast_opt, alpha = 0.05)
res_tableOPT <- lfcShrink(dds, coef = 2, contrast=contrast_opt, res=res_tableOPT_unshrunken)
contrast_wt <- c("sampletype", "wt", "control")
res_tableWT_unshrunken <- results(dds, contrast=contrast_wt, alpha = 0.05)
res_tableWT <- lfcShrink(dds,  coef = 4, type = "apeglm", contrast=contrast_wt, res=res_tableWT_unshrunken)
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run analysis
dds <- DESeq(dds)
res <- results(dds)
head(results(dds, tidy=TRUE)) #let's look at the results table
View(res)
summary(res)
res <- res[order(res$padj),]
head(res)
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot"))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
dds <- DESeq(dds)
plotMA(dds)
res <- results(dds)
plotMA(res)
dds <- DESeq(dds)
plotMA(dds, main = "dds")
res <- results(dds)
plotMA(res, main = "res")
plotMA(res, alpha = 0.1, main = "res")
plotMA(res, alpha = 0.05, main = "res")
plotMA(res, alpha = 0.01, main = "res")
## log2fold change calculation and MAplot:
contrast_wt <- c("sampletype", "wt", "control")
res_tableWT_unshrunken <- results(dds, contrast=contrast_wt, alpha = 0.05)
res_tableWT <- lfcShrink(dds, contrast=contrast_wt, res=res_tableWT_unshrunken)
View(data)
View(res)
head(res)
View(df)
plotMA(res, alpha = 0.05, , main = "res", ylim=[5,5])
plotMA(res, alpha = 0.05, , main = "res", ylim=(5,5))
plotMA(res, alpha = 0.05, , main = "res", ylim=5,5)
plotMA(res, alpha = 0.05, , main = "res", ylim=c(5,5))
plotMA(res, alpha = 0.05, , main = "res", ylim=c(-5,5))
plotMA(res, alpha = 0.05, , main = "res", ylim=c(-10,10))
plotMA(res, alpha = 0.05, , main = "res", ylim=c(-7,7))
d <- plotCounts(dds, gene="ENSG00000129221", intgroup="sampletype", returnData=TRUE)
# Plotting the MOV10 normalized counts, using the samplenames (rownames of d as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("AIPL1") +
theme(plot.title = element_text(hjust = 0.5))
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
#install.packages(<path to downloaded file with DEGreport tar.gz>, repos = NULL)
library(DEGreport)
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000129221", intgroup="sampletype", returnData=TRUE)
# Plotting the MOV10 normalized counts, using the samplenames (rownames of d as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("AIPL1") +
theme(plot.title = element_text(hjust = 0.5))
rld_mat <- assay(rld)    ## assay() is function from the "SummarizedExperiment" package that was loaded when you loaded DESeq2
rld <- rlog(dds, blind=TRUE)
plotPCA(rld, intgroup="sampletype")
## Heatmap:
### Extract the rlog matrix from the object
rld_mat <- assay(rld)    ## assay() is function from the "SummarizedExperiment" package that was loaded when you loaded DESeq2
rld_mat <- assay(rld)    ## assay() is function from the "SummarizedExperiment" package that was loaded when you loaded DESeq2
### Compute pairwise correlation values
rld_cor <- cor(rld_mat)    ## cor() is a base R function
head(rld_cor)   ## check the output of cor(), make note of the rownames and colnames
### Plot heatmap
pheatmap(rld_cor)
## Order results by padj values
top20_sigOE_genes <- res_tableOE_tb %>%
arrange(padj) %>% 	#Arrange rows by padj values
pull(gene) %>% 		#Extract character vector of ordered genes
head(n=20) 		#Extract the first 20 genes
top20_sigOE_genes <- res_table_tb %>%
arrange(padj) %>% 	#Arrange rows by padj values
pull(gene) %>% 		#Extract character vector of ordered genes
head(n=20) 		#Extract the first 20 genes
### Using ggplot2 to plot multiple genes (e.g. top 20):
## Order results by padj values
top20_sigOE_genes <- res_table %>%
arrange(padj) %>% 	#Arrange rows by padj values
pull(gene) %>% 		#Extract character vector of ordered genes
head(n=20) 		#Extract the first 20 genes
#ENSG00000129221 - AIPL1 gene
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000129221", intgroup="sampletype", returnData=TRUE)
# Plotting the MOV10 normalized counts, using the samplenames (rownames of d as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("AIPL1") +
theme(plot.title = element_text(hjust = 0.5))
### Using ggplot2 to plot multiple genes (e.g. top 20):
## Order results by padj values
top20_sigOE_genes <- res_tableOE_tb %>%
arrange(padj) %>% 	#Arrange rows by padj values
pull(gene) %>% 		#Extract character vector of ordered genes
head(n=20) 		#Extract the first 20 genes
View(res_table)
top20_sig_genes <- res_table %>%
arrange(padj) %>% 	#Arrange rows by padj values
pull(gene) %>% 		#Extract character vector of ordered genes
head(n=20) 		#Extract the first 20 genes
top20_sig_genes <- res_table %>%
arrange(padj) %>% 	#Arrange rows by padj values
pull(name) %>% 		#Extract character vector of ordered genes
head(n=20) 		#Extract the first 20 genes
View(res_table)
estimateSizeFactors(dds)
estimateDispersions(dds)
nbinomWaldTest(dds)
resultsNames(dds)
sizeFactors(dds) ## normalization factor applied to each sample
res <- res[order(res$padj),]
head(res)
## Total number of raw counts per sample
colSums(counts(dds))
## Total number of normalized counts per sample
colSums(counts(dds, normalized=T))
## Plot dispersion estimates
plotDispEsts(dds)
rm(list=ls(all=TRUE))
## Setups
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
#install.packages(<path to downloaded file with DEGreport tar.gz>, repos = NULL)
library(DEGreport)
## reaading file:
df <- read.csv("data/counts.Sirius.csv",sep = ";") #, row.names = 2)
## Trying to reorder columns by replicates alphabetically:
coln1 <- c(colnames(df[1:4]))
coln2 <- c(colnames(df[5:16]))
coln2 <- sort(coln2)
coln = c(coln1, coln2)
coln
data <- df[, coln]
### Check classes of the data we just brought in
class(data)
## some preparations of data dataframe:
drop <- c("Refseq","Gene.name", "Symbol")
data = data[,!(names(data) %in% drop)]
data <- data[complete.cases(data['name']),]
row.names(data) <- data[,1]
drop <- c("name")
data = data[,!(names(data) %in% drop)]
meta <- data.frame(colnames(data))
meta['sampletype'] <- c('wt', 'wt', 'wt', 'opt', 'opt', 'opt',
'control', 'control', 'control', 'GFP', 'GFP', 'GFP')
row.names(meta) <- meta[,1]
meta <- subset(meta, select = c('sampletype'))
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))
## creating DESeq DataSet
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run DESeq2 differential expression analysis
dds <- DESeq(dds)
##  **Optional step** - Output normalized counts to save as a file to access outside RStudio
normalized_counts <- counts(dds, normalized=TRUE)
write.table(normalized_counts, file="data/normalized_counts.txt", sep="\t", quote=F, col.names=NA)
#### Using ggplot2 to plot expression of a single gene
#ENSG00000129221 - AIPL1 gene
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000129221", intgroup="sampletype", returnData=TRUE)
# Plotting the MOV10 normalized counts, using the samplenames (rownames of d as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("AIPL1") +
theme(plot.title = element_text(hjust = 0.5))
res <- results(dds)
head(results(dds, tidy=TRUE)) #let's look at the results table
summary(res)
res <- res[order(res$padj),]
head(res)
top20_sig_genes <- res %>%
arrange(padj) %>% 	#Arrange rows by padj values
pull(gene) %>% 		#Extract character vector of ordered genes
head(n=20) 		#Extract the first 20 genes
# Output results of Wald test for contrast
contrast <- c("condition", "level_to_compare", "base_level")
res <- results(dds, contrast = contrast)
rm(list=ls(all=TRUE))
## Setups
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
#install.packages(<path to downloaded file with DEGreport tar.gz>, repos = NULL)
library(DEGreport)
## reaading file:
df <- read.csv("data/counts.Sirius.csv",sep = ";") #, row.names = 2)
## Trying to reorder columns by replicates alphabetically:
coln1 <- c(colnames(df[1:4]))
coln2 <- c(colnames(df[5:16]))
coln2 <- sort(coln2)
coln = c(coln1, coln2)
coln
data <- df[, coln]
### Check classes of the data we just brought in
class(data)
## some preparations of data dataframe:
drop <- c("Refseq","Gene.name", "Symbol")
data = data[,!(names(data) %in% drop)]
data <- data[complete.cases(data['name']),]
row.names(data) <- data[,1]
drop <- c("name")
data = data[,!(names(data) %in% drop)]
meta <- data.frame(colnames(data))
meta['sampletype'] <- c('wt', 'wt', 'wt', 'opt', 'opt', 'opt',
'control', 'control', 'control', 'GFP', 'GFP', 'GFP')
row.names(meta) <- meta[,1]
meta <- subset(meta, select = c('sampletype'))
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))
## creating DESeq DataSet
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run DESeq2 differential expression analysis
dds <- DESeq(dds)
# Transform counts for data visualization
rld <- rlog(dds, blind=TRUE)
# Plot PCA
plotPCA(rld, intgroup="sampletype")
# Extract the rlog matrix from the object
rld_mat <- assay(rld)
# Compute pairwise correlation values
rld_cor <- cor(rld_mat)
# Plot heatmap
pheatmap(rld_cor)
drop <- c("name", 'CC1')
data = data[,!(names(data) %in% drop)]
meta <- data.frame(colnames(data))
meta['sampletype'] <- c('wt', 'wt', 'wt', 'opt', 'opt', 'opt',
'control', 'control', 'GFP', 'GFP', 'GFP')
row.names(meta) <- meta[,1]
meta <- subset(meta, select = c('sampletype'))
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run DESeq2 differential expression analysis
dds <- DESeq(dds)
# Transform counts for data visualization
rld <- rlog(dds, blind=TRUE)
# Plot PCA
plotPCA(rld, intgroup="sampletype")
# Extract the rlog matrix from the object
rld_mat <- assay(rld)
# Compute pairwise correlation values
rld_cor <- cor(rld_mat)
# Plot heatmap
pheatmap(rld_cor)
heat.colors <- brewer.pal(6, "Blues")
pheatmap(rld_cor, color = heat.colors, border_color=NA, fontsize = 10,
fontsize_row = 10, height=20)
heat.colors <- brewer.pal(6, "Blues")
pheatmap(rld_cor, color = heat.colors, fontsize = 10,
fontsize_row = 10, height=20)
rm(list=ls(all=TRUE))
## Setups
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
#install.packages(<path to downloaded file with DEGreport tar.gz>, repos = NULL)
library(DEGreport)
## reaading file:
df <- read.csv("data/counts.Sirius.csv",sep = ";") #, row.names = 2)
## Trying to reorder columns by replicates alphabetically:
coln1 <- c(colnames(df[1:4]))
coln2 <- c(colnames(df[5:16]))
coln2 <- sort(coln2)
coln = c(coln1, coln2)
coln
data <- df[, coln]
### Check classes of the data we just brought in
class(data)
## some preparations of data dataframe:
drop <- c("Refseq","Gene.name", "Symbol")
data = data[,!(names(data) %in% drop)]
data <- data[complete.cases(data['name']),]
row.names(data) <- data[,1]
drop <- c("name", 'CC1') #remove CC1 from analysis, cause it doesn't cluster well
data = data[,!(names(data) %in% drop)]
meta <- data.frame(colnames(data))
meta['sampletype'] <- c('wt', 'wt', 'wt', 'opt', 'opt', 'opt',
'control', 'control', 'GFP', 'GFP', 'GFP')
row.names(meta) <- meta[,1]
meta <- subset(meta, select = c('sampletype'))
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))
## creating DESeq DataSet
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run DESeq2 differential expression analysis
dds <- DESeq(dds)
# QC
# Transform counts for data visualization
rld <- rlog(dds, blind=TRUE)
# Plot PCA
plotPCA(rld, intgroup="sampletype")
# Extract the rlog matrix from the object
rld_mat <- assay(rld)
# Compute pairwise correlation values
rld_cor <- cor(rld_mat)
# Plot heatmap
heat.colors <- brewer.pal(6, "Blues")
pheatmap(rld_cor, color = heat.colors, fontsize = 10, fontsize_row = 10, height=20)
contrast <- c('sampletype')
res <- results(dds, contrast = contrast)
View(data)
View(meta)
contrast <- c("sampletype", "wt", "control")
res <- results(dds, contrast = contrast)
res <- lfcShrink(dds, contrast = contrast, res=res)
res <- lfcShrink(dds, contrast = contrast, res=res_unshrunken)
contrast <- c("sampletype", "wt", "control")
res_unshrunken <- results(dds, contrast = contrast)
res <- lfcShrink(dds, contrast = contrast, res=res_unshrunken)
res <- lfcShrink(dds, contrast = contrast, res=res_unshrunken, type='normal')
contrast <- c("sampletype", "wt", c("control", 'GFP'))
res_unshrunken_wt <- results(dds, contrast = contrast)
rm(list=ls(all=TRUE))
## Setups
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
#install.packages(<path to downloaded file with DEGreport tar.gz>, repos = NULL)
library(DEGreport)
## reaading file:
df <- read.csv("data/counts.Sirius.csv",sep = ";") #, row.names = 2)
## Trying to reorder columns by replicates alphabetically:
coln1 <- c(colnames(df[1:4]))
coln2 <- c(colnames(df[5:16]))
coln2 <- sort(coln2)
coln = c(coln1, coln2)
coln
data <- df[, coln]
### Check classes of the data we just brought in
class(data)
## some preparations of data dataframe:
drop <- c("Refseq","Gene.name", "Symbol")
data = data[,!(names(data) %in% drop)]
data <- data[complete.cases(data['name']),]
row.names(data) <- data[,1]
drop <- c("name", 'CC1') #remove CC1 from analysis, cause it doesn't cluster well
data = data[,!(names(data) %in% drop)]
meta <- data.frame(colnames(data))
meta['sampletype'] <- c('wt', 'wt', 'wt', 'opt', 'opt', 'opt',
'control', 'control', 'GFP', 'GFP', 'GFP')
row.names(meta) <- meta[,1]
meta <- subset(meta, select = c('sampletype'))
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))
## creating DESeq DataSet
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run DESeq2 differential expression analysis
dds <- DESeq(dds)
## QC
# Transform counts for data visualization
rld <- rlog(dds, blind=TRUE)
# Plot PCA
plotPCA(rld, intgroup="sampletype")
# Extract the rlog matrix from the object
rld_mat <- assay(rld)
# Compute pairwise correlation values
rld_cor <- cor(rld_mat)
# Plot heatmap
heat.colors <- brewer.pal(6, "Blues")
pheatmap(rld_cor, color = heat.colors, fontsize = 10, fontsize_row = 10, height=20)
## Shrinkage
contrast <- c("sampletype", "wt", "control")
res_unshrunken_wt <- results(dds, contrast = contrast)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast, res=res_unshrunken_wt, type='normal')
contrast <- c("sampletype", "opt", "control")
res_unshrunken_opt <- results(dds, contrast = contrast)
res_shrunken_opt <- lfcShrink(dds, contrast = contrast, res=res_unshrunken_opt, type='normal')
# Turn the results object into a data frame
res_df_wt <- data.frame(res_shrunken_wt)
# Subset the significant results
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
install.packages(c("clue", "digest", "jsonlite", "sys", "vctrs", "xfun", "yaml"))
rm(list=ls(all=TRUE))
## Setups
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
#install.packages(<path to downloaded file with DEGreport tar.gz>, repos = NULL)
library(DEGreport)
## reaading file:
df <- read.csv("data/counts.Sirius.csv",sep = ";") #, row.names = 2)
## Trying to reorder columns by replicates alphabetically:
coln1 <- c(colnames(df[1:4]))
coln2 <- c(colnames(df[5:16]))
coln2 <- sort(coln2)
coln = c(coln1, coln2)
coln
data <- df[, coln]
### Check classes of the data we just brought in
class(data)
## some preparations of data dataframe:
drop <- c("Refseq","Gene.name", "Symbol")
data = data[,!(names(data) %in% drop)]
data <- data[complete.cases(data['name']),]
row.names(data) <- data[,1]
drop <- c("name", 'CC1') #remove CC1 from analysis, cause it doesn't cluster well
data = data[,!(names(data) %in% drop)]
meta <- data.frame(colnames(data))
meta['sampletype'] <- c('wt', 'wt', 'wt', 'opt', 'opt', 'opt',
'control', 'control', 'GFP', 'GFP', 'GFP')
row.names(meta) <- meta[,1]
meta <- subset(meta, select = c('sampletype'))
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))
## creating DESeq DataSet
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run DESeq2 differential expression analysis
dds <- DESeq(dds)
## QC
# Transform counts for data visualization
rld <- rlog(dds, blind=TRUE)
# Plot PCA
plotPCA(rld, intgroup="sampletype")
# Extract the rlog matrix from the object
rld_mat <- assay(rld)
# Compute pairwise correlation values
rld_cor <- cor(rld_mat)
# Plot heatmap
heat.colors <- brewer.pal(6, "Blues")
pheatmap(rld_cor, color = heat.colors, fontsize = 10, fontsize_row = 10, height=20)
## Shrinkage
contrast <- c("sampletype", "wt", "control")
res_unshrunken_wt <- results(dds, contrast = contrast)
res_shrunken_wt <- lfcShrink(dds, contrast = contrast, res=res_unshrunken_wt, type='normal')
contrast <- c("sampletype", "opt", "control")
res_unshrunken_opt <- results(dds, contrast = contrast)
res_shrunken_opt <- lfcShrink(dds, contrast = contrast, res=res_unshrunken_opt, type='normal')
# Turn the results object into a data frame
res_df_wt <- data.frame(res_shrunken_wt)
# Subset the significant results
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
rlang::last_error()
padj.cutoff <- 0.05
lfc.cutoff <- 0.58
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
View(sig_res_wt)
sig_res_wt
padj.cutoff <- 0.05
lfc.cutoff <- 0.58
# Turn the results object into a data frame
res_df_wt <- data.frame(res_shrunken_wt)
res_df_opt <- data.frame(res_shrunken_opt)
# Subset the significant results
sig_res_wt <- filter(res_df_wt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
sig_res_opt <- filter(res_df_opt, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
View(sig_res_opt)
View(sig_res_wt)
plotCounts(dds, gene="ENSG00000129221", intgroup="sampletype")
d <- plotCounts(dds, gene="ENSG00000129221", intgroup="sampletype", returnData=TRUE)
# Plotting the MOV10 normalized counts, using the samplenames (rownames of d as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("AIPL1") +
theme(plot.title = element_text(hjust = 0.5))
### Using ggplot2 to plot multiple genes (e.g. top 20):
## Order results by padj values
top20_sig_genes <- res %>%
arrange(padj) %>% 	#Arrange rows by padj values
pull(gene) %>% 		#Extract character vector of ordered genes
head(n=20) 		#Extract the first 20 genes
